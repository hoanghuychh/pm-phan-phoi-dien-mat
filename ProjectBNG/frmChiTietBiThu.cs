using ProjectBNG.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using ProjectBNG.Class;

namespace ProjectBNG
{
    public partial class frmChiTietBiThu : Form
    {
        SMMgEntities db = new SMMgEntities();
        string danhSachDien = "";
        //string query = "";
        public frmChiTietBiThu(string dsDien)
        {
            InitializeComponent();
            db.Database.ExecuteSqlCommand("delete DienMatTemp");
            danhSachDien = dsDien;
            DienMatTemp dienMatTemp = new DienMatTemp();
            int count = danhSachDien.Split(new char[] { ',' }).Count();
            foreach (string item in danhSachDien.Split(new char[] { ',' }))
            {
                //if (count > 1)
                //{

                //    query += "MaDienMat =" + item + " OR ";
                //    count--;
                //}
                //else
                //    query += "MaDienMat =" + item;
                dienMatTemp.MaDienMat= Int32.Parse(item);
                db.DienMatTemps.Add(dienMatTemp);
                db.SaveChanges();
            }
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            ProjectBNG.Models.SMMgEntities dbContext = new ProjectBNG.Models.SMMgEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            var DienMatSelection = (from i in db.DienMatTemps
                                    join z in db.DienMats
                                    on i.MaDienMat equals z.MaDienMat
                                    select new
                                    {
                                        id=z.ID,
                                        MaDienMat = z.MaDienMat,
                                        Ngay = z.Ngay,
                                        NoiGui = z.NoiGui,
                                        DoMat = z.DoMat,
                                        Trang = z.Trang,
                                        NguoiIn = z.NguoiIn,
                                        NguoiDuyet=z.NguoiDuyet,
                                        NguoiKy=z.NguoiKy,
                                        LuuFile=z.LuuFile
                                    }).ToList();

            //comment
            dbContext.DienMats.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                //foreach (var item in selectDien)
                //{
                //    dienMatsBindingSource.DataSource = dbContext.DienMats.Select(m => m == db.DienMatTemps.Select(n => n.MaDienMat == m.MaDienMat)).ToList();
                //}
                dienMatsBindingSource.DataSource = DienMatSelection;

            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void frmChiTietBiThu_Load(object sender, EventArgs e)
        {
        }

        private void gridViewChiTietBiThu_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            if (!gridViewChiTietBiThu.IsGroupRow(e.RowHandle)) //Nếu không phải là Group
            {
                if (e.Info.IsRowIndicator) //Nếu là dòng Indicator
                {
                    if (e.RowHandle < 0)
                    {
                        e.Info.ImageIndex = 0;
                        e.Info.DisplayText = string.Empty;
                    }
                    else
                    {
                        e.Info.ImageIndex = -1; //Không hiển thị hình
                        e.Info.DisplayText = (e.RowHandle + 1).ToString(); //Số thứ tự tăng dần
                    }

                    //hàm này dùng thay đổi độ rộng mặc định của cột số thứ tự
                    var _Size = e.Graphics.MeasureString(e.Info.DisplayText, e.Appearance.Font);
                    var _Width = Convert.ToInt32(_Size.Width) + 20;
                    BeginInvoke(new MethodInvoker(delegate { CommonFunction.cal(_Width, gridViewChiTietBiThu); }));
                }
            }
            else
            {
                e.Info.ImageIndex = -1;
                e.Info.DisplayText = string.Format("[{0}]", e.RowHandle * -1); //Nhân -1 để đánh lại số thứ tự tăng dần
                var _Size = e.Graphics.MeasureString(e.Info.DisplayText, e.Appearance.Font);
                var _Width = Convert.ToInt32(_Size.Width) + 20;
                BeginInvoke(new MethodInvoker(delegate { CommonFunction.cal(_Width, gridViewChiTietBiThu); }));
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnOpenPdf_Click(object sender, EventArgs e)
        {
            //noiGui.id = int.Parse(gridView1.GetRowCellValue(gridView1.FocusedRowHandle, "id").ToString());
            string pathToPdf = gridViewChiTietBiThu.GetRowCellValue(gridViewChiTietBiThu.FocusedRowHandle, "LuuFile").ToString();
            System.Diagnostics.Process.Start(pathToPdf);
        }
    }
}
