using ProjectBNG.Validation;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.Data.Entity;

using DevExpress.Pdf;
using ProjectBNG.Models;
using System.Diagnostics;

namespace ProjectBNG
{
    public partial class frmPrinting : Form
    {
        static public List<NoiNhan> noiNhans { get; set; }
        static public string FileName;
        float x = 0;
        float y = 250;
        MemoryStream ms = new MemoryStream();
        public void setNoiNhan(List<NoiNhan> n)
        {
            noiNhans = n;
            try {
                PdfDocumentProcessor processor = new PdfDocumentProcessor();
            if (y == 250)
            {
                processor.LoadDocument(FileName);
            }
            else
            {
                processor.LoadDocument(ms);
            }
            foreach (var a in noiNhans)
            {
                using (SolidBrush textBrush = new SolidBrush(Color.FromArgb(0, 0, 0)))
                {
                    AddGraphics(processor, a.TenNoiNhan, textBrush, x, y);
                }
                y += 20;
            }
            processor.SaveDocument(ms);
            pdfViewer1.LoadDocument(ms);
            }
            catch { }
            
        }
        public frmPrinting()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            ProjectBNG.Models.SMMgEntities dbContext = new ProjectBNG.Models.SMMgEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.DienMats.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                dienMatsBindingSource1.DataSource = dbContext.DienMats.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.NoiNhanTemps.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    noiNhanTempsBindingSource.DataSource = dbContext.NoiNhanTemps.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void frmPrinting_Load(object sender, EventArgs e)
        {
            // cbxPrivateFile
            cbxPrivateFile.Items.Add("Mật");
            cbxPrivateFile.Items.Add("TM");
            cbxPrivateFile.Items.Add("Tuyệt mật");
            cbxPrivateFile.SelectedItem = cbxPrivateFile.Items[0];

            // cbxPrivateAttachedFile
            cbxPrivateAttachedFile.Items.Add("Rõ");
            cbxPrivateAttachedFile.Items.Add("Mật");
            cbxPrivateAttachedFile.Items.Add("TM");
            cbxPrivateAttachedFile.Items.Add("Tuyệt mật");
            cbxPrivateAttachedFile.SelectedItem = cbxPrivateAttachedFile.Items[1];

            // cbxPlaceOfSending: Lay tu DB ra
            cbxPlaceOfSending.Items.Add("Place 0");
            cbxPlaceOfSending.Items.Add("Place 1");
            cbxPlaceOfSending.SelectedItem = cbxPlaceOfSending.Items[0];

            // cbxCensor: Lay tu DB ra
            cbxCensor.Items.Add("Đặng Bảo Châu");
            cbxCensor.Items.Add("Censor 1");
            cbxCensor.Items.Add("Censor 2");

            // cbxSigner: Lay tu DB ra
            cbxSigner.Items.Add("Lê Thanh Tùng");
            cbxSigner.Items.Add("Signer 1");
            cbxSigner.Items.Add("Signer 2");

            // chbIncluding, txtIncluding
            chbIncluding.Checked = true;
            txtIncluding.Text = "(Ghi)";

        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        const float DrawingDpi = 72f;

        private void btnBrowseFile_Click(object sender, EventArgs e)
        {
            MemoryStream ms = new MemoryStream();
            using (OpenFileDialog ofd = new OpenFileDialog() { ValidateNames = true, Multiselect = false, Filter = "PDF Files(*.PDF)|*.PDF|All Files(*.*)|*.*" })
            {
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    pdfViewer1.LoadDocument(ofd.FileName);
                    FileName = ofd.FileName;
                }
            }
        }

        static void AddGraphics(PdfDocumentProcessor processor, string text, SolidBrush textBrush, float x, float y)
        {
            IList<PdfPage> pages = processor.Document.Pages;
            for (int i = 0; i < pages.Count; i++)
            {
                PdfPage page = pages[i];
                using (PdfGraphics graphics = processor.CreateGraphics())
                {
                    SizeF actualPageSize = PrepareGraphics(page, graphics);
                    using (Font font = new Font("Times New Roman", 12, FontStyle.Regular))
                    {
                        SizeF textSize = graphics.MeasureString(text, font, PdfStringFormat.GenericDefault);
                        PointF topLeft = new PointF(x, y);
                        //PointF bottomRight = new PointF(actualPageSize.Width - textSize.Width, actualPageSize.Height - textSize.Height);
                        graphics.DrawString(text, font, textBrush, topLeft);
                        //graphics.DrawString(text, font, textBrush, bottomRight);
                        graphics.AddToPageForeground(page, DrawingDpi, DrawingDpi);
                    }
                }
            }
        }

        static SizeF PrepareGraphics(PdfPage page, PdfGraphics graphics)
        {
            PdfRectangle cropBox = page.CropBox;
            float cropBoxWidth = (float)cropBox.Width;
            float cropBoxHeight = (float)cropBox.Height;

            switch (page.Rotate)
            {
                case 90:
                    graphics.RotateTransform(-90);
                    graphics.TranslateTransform(-cropBoxHeight, 0);
                    return new SizeF(cropBoxHeight, cropBoxWidth);
                case 180:
                    graphics.RotateTransform(-180);
                    graphics.TranslateTransform(-cropBoxWidth, -cropBoxHeight);
                    return new SizeF(cropBoxWidth, cropBoxHeight);
                case 270:
                    graphics.RotateTransform(-270);
                    graphics.TranslateTransform(0, -cropBoxWidth);
                    return new SizeF(cropBoxHeight, cropBoxWidth);
            }
            return new SizeF(cropBoxWidth, cropBoxHeight);
        }

        private void btnAddAttachedFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog() { Filter = "(Docx file)|*.docx|(PDF file)|*.pdf" };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string[] parts = openFileDialog.FileName.Trim().Split('\\');
                txtAttachedFileName.Text += parts[parts.Length - 1] + "; ";
            }
        }

        private void btnRemoveAttachedFile_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtAttachedFileName.Text))
            {
                return;
            }

            string[] parts = txtAttachedFileName.Text.Trim().Split(' ');
            int count = parts.Length;
            count--;
            txtAttachedFileName.Text = "";
            for (int i = 0; i < count; i++)
            {
                txtAttachedFileName.Text += parts[i];
            }
        }

        private void txt_Click(object sender, EventArgs e)
        {
            var textBox = sender as TextBox;

            if (textBox == null) return;
            if (textBox.Equals(txtIncluding))
            {
                txtIncluding.Text = "";
            }
            if (textBox.Equals(txtPage))
            {
                txtPage.Text = "";
            }
            if (textBox.Equals(txtAllignBottomSignature))
            {
                txtAllignBottomSignature.Text = "";
            }
            if (textBox.Equals(txtAllignBottomSM))
            {
                txtAllignBottomSM.Text = "";
            }
            if (textBox.Equals(txtAllignBottomIncludedSM))
            {
                txtAllignBottomIncludedSM.Text = "";
            }
        }

        private void txtKeyPress(object sender, KeyPressEventArgs e)
        {
            if (char.IsLetter(e.KeyChar) || // Alphabe char
                 char.IsSymbol(e.KeyChar) || //Special char
                 char.IsWhiteSpace(e.KeyChar) || //Space
                 char.IsPunctuation(e.KeyChar)) //dot symbol               
            {
                e.Handled = true; // Khong cho nhap so
                MessageBox.Show("Vui lòng nhập số.");
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {

        }

        private void btnPrint_Click(object sender, EventArgs e)
        {

        }

        private void btnPreview_Click(object sender, EventArgs e)
        {

        }

        private void chbPrint_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void txtAllignBottomIncludedSM_TextChanged(object sender, EventArgs e)
        {

        }

        private void label13_Click(object sender, EventArgs e)
        {

        }

        private void btnAddPlaceOfSending_Click(object sender, EventArgs e)
        {
            frmAddPrinting frmAdd = new frmAddPrinting();
            frmAdd.Show();
            frmAdd.OnSubmitForm += OnSubmitNguoiNhan;
        }
        public void OnSubmitNguoiNhan(List<NoiNhan> list)
        {
            setNoiNhan(list);
        }
    }
}
